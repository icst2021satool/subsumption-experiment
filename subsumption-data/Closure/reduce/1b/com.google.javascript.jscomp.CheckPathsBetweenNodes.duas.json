{
"Class" : "com.google.javascript.jscomp.CheckPathsBetweenNodes", 
"Methods" : [{ "Name" : "discoverBackEdges" ,
"Duas" : 22,
"0" :  "(140,(142,143), this)",
"1" :  "(140,(142,145), this)",
"2" :  "(140,147, this)",
"3" :  "(140,152, u)",
"4" :  "(140,(148,149), GRAY)",
"5" :  "(140,(148,151), GRAY)",
"6" :  "(140,(146,147), WHITE)",
"7" :  "(140,(146,148), WHITE)",
"8" :  "(140,149, BACK_EDGE)",
"9" :  "(140,152, BLACK)",
"10" :  "(141,(141,141), i$)",
"11" :  "(141,(141,152), i$)",
"12" :  "(141,141, i$)",
"13" :  "(141,(142,143), e)",
"14" :  "(141,(142,145), e)",
"15" :  "(141,145, e)",
"16" :  "(141,149, e)",
"17" :  "(145,(146,147), v)",
"18" :  "(145,(146,148), v)",
"19" :  "(145,(148,149), v)",
"20" :  "(145,(148,151), v)",
"21" :  "(145,147, v)"},{ "Name" : "ignoreEdge" ,
"Duas" : 6,
"0" :  "(156,(156,156), this)",
"1" :  "(156,(156,156), this)",
"2" :  "(156,(156,156), e)",
"3" :  "(156,(156,156), e)",
"4" :  "(156,(156,156), this.edgePredicate)",
"5" :  "(156,(156,156), this.edgePredicate)"},{ "Name" : "checkAllPathsWithoutBackEdges" ,
"Duas" : 51,
"0" :  "(165,(165,165), this)",
"1" :  "(165,(165,169), this)",
"2" :  "(165,(180,181), this)",
"3" :  "(165,(180,183), this)",
"4" :  "(165,(188,189), this)",
"5" :  "(165,(188,191), this)",
"6" :  "(165,(165,165), this)",
"7" :  "(165,(165,167), this)",
"8" :  "(165,(165,165), this)",
"9" :  "(165,(165,169), this)",
"10" :  "(165,(165,167), this)",
"11" :  "(165,(165,169), this)",
"12" :  "(165,(165,165), a)",
"13" :  "(165,(165,169), a)",
"14" :  "(165,(169,170), a)",
"15" :  "(165,(169,172), a)",
"16" :  "(165,172, a)",
"17" :  "(165,(165,165), a)",
"18" :  "(165,(165,169), a)",
"19" :  "(165,(165,167), a)",
"20" :  "(165,(165,169), a)",
"21" :  "(165,(169,170), b)",
"22" :  "(165,(169,172), b)",
"23" :  "(165,(188,189), b)",
"24" :  "(165,(188,191), b)",
"25" :  "(165,(165,165), this.nodePredicate)",
"26" :  "(165,(165,169), this.nodePredicate)",
"27" :  "(165,(165,165), this.inclusive)",
"28" :  "(165,(165,167), this.inclusive)",
"29" :  "(165,(165,165), this.start)",
"30" :  "(165,(165,169), this.start)",
"31" :  "(165,(165,167), this.end)",
"32" :  "(165,(165,169), this.end)",
"33" :  "(165,(175,176), VISITED_EDGE)",
"34" :  "(165,(175,178), VISITED_EDGE)",
"35" :  "(165,178, VISITED_EDGE)",
"36" :  "(165,(183,184), BACK_EDGE)",
"37" :  "(165,(183,187), BACK_EDGE)",
"38" :  "(172,(172,172), i$)",
"39" :  "(172,(172,192), i$)",
"40" :  "(172,172, i$)",
"41" :  "(172,(175,176), e)",
"42" :  "(172,(175,178), e)",
"43" :  "(172,178, e)",
"44" :  "(172,(180,181), e)",
"45" :  "(172,(180,183), e)",
"46" :  "(172,(183,184), e)",
"47" :  "(172,(183,187), e)",
"48" :  "(172,187, e)",
"49" :  "(187,(188,189), next)",
"50" :  "(187,(188,191), next)"},{ "Name" : "checkSomePathsWithoutBackEdges" ,
"Duas" : 51,
"0" :  "(201,(201,201), this)",
"1" :  "(201,(201,205), this)",
"2" :  "(201,(216,217), this)",
"3" :  "(201,(216,219), this)",
"4" :  "(201,(224,225), this)",
"5" :  "(201,(224,227), this)",
"6" :  "(201,(201,201), this)",
"7" :  "(201,(201,203), this)",
"8" :  "(201,(201,201), this)",
"9" :  "(201,(201,205), this)",
"10" :  "(201,(201,203), this)",
"11" :  "(201,(201,205), this)",
"12" :  "(201,(201,201), a)",
"13" :  "(201,(201,205), a)",
"14" :  "(201,(205,206), a)",
"15" :  "(201,(205,208), a)",
"16" :  "(201,208, a)",
"17" :  "(201,(201,201), a)",
"18" :  "(201,(201,205), a)",
"19" :  "(201,(201,203), a)",
"20" :  "(201,(201,205), a)",
"21" :  "(201,(205,206), b)",
"22" :  "(201,(205,208), b)",
"23" :  "(201,(224,225), b)",
"24" :  "(201,(224,227), b)",
"25" :  "(201,(201,201), this.nodePredicate)",
"26" :  "(201,(201,205), this.nodePredicate)",
"27" :  "(201,(201,201), this.inclusive)",
"28" :  "(201,(201,203), this.inclusive)",
"29" :  "(201,(201,201), this.start)",
"30" :  "(201,(201,205), this.start)",
"31" :  "(201,(201,203), this.end)",
"32" :  "(201,(201,205), this.end)",
"33" :  "(201,(211,212), VISITED_EDGE)",
"34" :  "(201,(211,214), VISITED_EDGE)",
"35" :  "(201,214, VISITED_EDGE)",
"36" :  "(201,(219,220), BACK_EDGE)",
"37" :  "(201,(219,223), BACK_EDGE)",
"38" :  "(208,(208,208), i$)",
"39" :  "(208,(208,228), i$)",
"40" :  "(208,208, i$)",
"41" :  "(208,(211,212), e)",
"42" :  "(208,(211,214), e)",
"43" :  "(208,214, e)",
"44" :  "(208,(216,217), e)",
"45" :  "(208,(216,219), e)",
"46" :  "(208,(219,220), e)",
"47" :  "(208,(219,223), e)",
"48" :  "(208,223, e)",
"49" :  "(223,(224,225), next)",
"50" :  "(223,(224,227), next)"}]
}
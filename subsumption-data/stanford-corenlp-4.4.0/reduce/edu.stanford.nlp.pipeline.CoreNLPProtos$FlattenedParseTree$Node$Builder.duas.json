{
"Class" : "edu.stanford.nlp.pipeline.CoreNLPProtos$FlattenedParseTree$Node$Builder", 
"Methods" : [{ "Name" : "build" ,
"Duas" : 4,
"0" :  "(-1,(-1,-1), result)",
"1" :  "(-1,(-1,-1), result)",
"2" :  "(-1,-1, result)",
"3" :  "(-1,-1, result)"},{ "Name" : "buildPartial" ,
"Duas" : 35,
"0" :  "(-1,(-1,-1), this)",
"1" :  "(-1,(-1,-1), this)",
"2" :  "(-1,(-1,-1), this)",
"3" :  "(-1,(-1,-1), this)",
"4" :  "(-1,(-1,-1), this)",
"5" :  "(-1,(-1,-1), this)",
"6" :  "(-1,-1, this)",
"7" :  "(-1,-1, this)",
"8" :  "(-1,-1, this)",
"9" :  "(-1,-1, this)",
"10" :  "(-1,-1, this)",
"11" :  "(-1,-1, this)",
"12" :  "(-1,(-1,-1), this.contentsCase_)",
"13" :  "(-1,(-1,-1), this.contentsCase_)",
"14" :  "(-1,(-1,-1), this.contentsCase_)",
"15" :  "(-1,(-1,-1), this.contentsCase_)",
"16" :  "(-1,(-1,-1), this.contentsCase_)",
"17" :  "(-1,(-1,-1), this.contentsCase_)",
"18" :  "(-1,-1, this.contentsCase_)",
"19" :  "(-1,-1, this.contents_)",
"20" :  "(-1,-1, this.contents_)",
"21" :  "(-1,-1, this.contents_)",
"22" :  "(-1,-1, this.score_)",
"23" :  "(-1,-1, result)",
"24" :  "(-1,-1, result)",
"25" :  "(-1,-1, result)",
"26" :  "(-1,-1, result)",
"27" :  "(-1,-1, result)",
"28" :  "(-1,-1, result)",
"29" :  "(-1,-1, result)",
"30" :  "(-1,(-1,-1), from_bitField0_)",
"31" :  "(-1,(-1,-1), from_bitField0_)",
"32" :  "(-1,-1, to_bitField0_)",
"33" :  "(-1,-1, to_bitField0_)",
"34" :  "(-1,-1, to_bitField0_)"},{ "Name" : "mergeFrom" ,
"Duas" : 7,
"0" :  "(-1,-1, this)",
"1" :  "(-1,-1, this)",
"2" :  "(-1,-1, this)",
"3" :  "(-1,(-1,-1), other)",
"4" :  "(-1,(-1,-1), other)",
"5" :  "(-1,-1, other)",
"6" :  "(-1,-1, other)"},{ "Name" : "mergeFrom" ,
"Duas" : 27,
"0" :  "(-1,-1, this)",
"1" :  "(-1,-1, this)",
"2" :  "(-1,-1, this)",
"3" :  "(-1,-1, this)",
"4" :  "(-1,-1, this)",
"5" :  "(-1,-1, this)",
"6" :  "(-1,-1, this)",
"7" :  "(-1,-1, this)",
"8" :  "(-1,-1, this)",
"9" :  "(-1,-1, this)",
"10" :  "(-1,(-1,-1), other)",
"11" :  "(-1,(-1,-1), other)",
"12" :  "(-1,(-1,-1), other)",
"13" :  "(-1,(-1,-1), other)",
"14" :  "(-1,(-1,-1), other)",
"15" :  "(-1,(-1,-1), other)",
"16" :  "(-1,(-1,-1), other)",
"17" :  "(-1,(-1,-1), other)",
"18" :  "(-1,-1, other)",
"19" :  "(-1,-1, other)",
"20" :  "(-1,-1, other)",
"21" :  "(-1,-1, other)",
"22" :  "(-1,-1, other)",
"23" :  "(-1,(-1,-1), $SwitchMap$edu$stanford$nlp$pipeline$CoreNLPProtos$FlattenedParseTree$Node$ContentsCase)",
"24" :  "(-1,(-1,-1), $SwitchMap$edu$stanford$nlp$pipeline$CoreNLPProtos$FlattenedParseTree$Node$ContentsCase)",
"25" :  "(-1,(-1,-1), $SwitchMap$edu$stanford$nlp$pipeline$CoreNLPProtos$FlattenedParseTree$Node$ContentsCase)",
"26" :  "(-1,(-1,-1), $SwitchMap$edu$stanford$nlp$pipeline$CoreNLPProtos$FlattenedParseTree$Node$ContentsCase)"},{ "Name" : "mergeFrom" ,
"Duas" : 5,
"0" :  "(-1,-1, this)",
"1" :  "(-1,-1, this)",
"2" :  "(-1,(-1,-1), parsedMessage)",
"3" :  "(-1,(-1,-1), parsedMessage)",
"4" :  "(-1,-1, parsedMessage)"},{ "Name" : "hasOpenNode" ,
"Duas" : 4,
"0" :  "(-1,(-1,-1), this)",
"1" :  "(-1,(-1,-1), this)",
"2" :  "(-1,(-1,-1), this.contentsCase_)",
"3" :  "(-1,(-1,-1), this.contentsCase_)"},{ "Name" : "getOpenNode" ,
"Duas" : 6,
"0" :  "(-1,(-1,-1), this)",
"1" :  "(-1,(-1,-1), this)",
"2" :  "(-1,-1, this)",
"3" :  "(-1,(-1,-1), this.contentsCase_)",
"4" :  "(-1,(-1,-1), this.contentsCase_)",
"5" :  "(-1,-1, this.contents_)"},{ "Name" : "clearOpenNode" ,
"Duas" : 8,
"0" :  "(-1,(-1,-1), this)",
"1" :  "(-1,(-1,-1), this)",
"2" :  "(-1,-1, this)",
"3" :  "(-1,-1, this)",
"4" :  "(-1,-1, this)",
"5" :  "(-1,-1, this)",
"6" :  "(-1,(-1,-1), this.contentsCase_)",
"7" :  "(-1,(-1,-1), this.contentsCase_)"},{ "Name" : "hasCloseNode" ,
"Duas" : 4,
"0" :  "(-1,(-1,-1), this)",
"1" :  "(-1,(-1,-1), this)",
"2" :  "(-1,(-1,-1), this.contentsCase_)",
"3" :  "(-1,(-1,-1), this.contentsCase_)"},{ "Name" : "getCloseNode" ,
"Duas" : 6,
"0" :  "(-1,(-1,-1), this)",
"1" :  "(-1,(-1,-1), this)",
"2" :  "(-1,-1, this)",
"3" :  "(-1,(-1,-1), this.contentsCase_)",
"4" :  "(-1,(-1,-1), this.contentsCase_)",
"5" :  "(-1,-1, this.contents_)"},{ "Name" : "clearCloseNode" ,
"Duas" : 8,
"0" :  "(-1,(-1,-1), this)",
"1" :  "(-1,(-1,-1), this)",
"2" :  "(-1,-1, this)",
"3" :  "(-1,-1, this)",
"4" :  "(-1,-1, this)",
"5" :  "(-1,-1, this)",
"6" :  "(-1,(-1,-1), this.contentsCase_)",
"7" :  "(-1,(-1,-1), this.contentsCase_)"},{ "Name" : "hasValue" ,
"Duas" : 4,
"0" :  "(-1,(-1,-1), this)",
"1" :  "(-1,(-1,-1), this)",
"2" :  "(-1,(-1,-1), this.contentsCase_)",
"3" :  "(-1,(-1,-1), this.contentsCase_)"},{ "Name" : "getValue" ,
"Duas" : 23,
"0" :  "(-1,(-1,-1), this)",
"1" :  "(-1,(-1,-1), this)",
"2" :  "(-1,(-1,-1), this)",
"3" :  "(-1,(-1,-1), this)",
"4" :  "(-1,-1, this)",
"5" :  "(-1,-1, this)",
"6" :  "(-1,(-1,-1), this.contentsCase_)",
"7" :  "(-1,(-1,-1), this.contentsCase_)",
"8" :  "(-1,(-1,-1), this.contentsCase_)",
"9" :  "(-1,(-1,-1), this.contentsCase_)",
"10" :  "(-1,-1, this.contents_)",
"11" :  "(-1,(-1,-1), ref)",
"12" :  "(-1,(-1,-1), ref)",
"13" :  "(-1,-1, ref)",
"14" :  "(-1,-1, ref)",
"15" :  "(-1,(-1,-1), ref)",
"16" :  "(-1,(-1,-1), ref)",
"17" :  "(-1,-1, ref)",
"18" :  "(-1,-1, ref)",
"19" :  "(-1,(-1,-1), bs)",
"20" :  "(-1,(-1,-1), bs)",
"21" :  "(-1,-1, s)",
"22" :  "(-1,-1, s)"},{ "Name" : "getValueBytes" ,
"Duas" : 21,
"0" :  "(-1,(-1,-1), this)",
"1" :  "(-1,(-1,-1), this)",
"2" :  "(-1,(-1,-1), this)",
"3" :  "(-1,(-1,-1), this)",
"4" :  "(-1,-1, this)",
"5" :  "(-1,-1, this)",
"6" :  "(-1,(-1,-1), this.contentsCase_)",
"7" :  "(-1,(-1,-1), this.contentsCase_)",
"8" :  "(-1,(-1,-1), this.contentsCase_)",
"9" :  "(-1,(-1,-1), this.contentsCase_)",
"10" :  "(-1,-1, this.contents_)",
"11" :  "(-1,(-1,-1), ref)",
"12" :  "(-1,(-1,-1), ref)",
"13" :  "(-1,-1, ref)",
"14" :  "(-1,-1, ref)",
"15" :  "(-1,(-1,-1), ref)",
"16" :  "(-1,(-1,-1), ref)",
"17" :  "(-1,-1, ref)",
"18" :  "(-1,-1, ref)",
"19" :  "(-1,-1, b)",
"20" :  "(-1,-1, b)"},{ "Name" : "setValue" ,
"Duas" : 7,
"0" :  "(-1,-1, this)",
"1" :  "(-1,-1, this)",
"2" :  "(-1,-1, this)",
"3" :  "(-1,-1, this)",
"4" :  "(-1,(-1,-1), value)",
"5" :  "(-1,(-1,-1), value)",
"6" :  "(-1,-1, value)"},{ "Name" : "clearValue" ,
"Duas" : 8,
"0" :  "(-1,(-1,-1), this)",
"1" :  "(-1,(-1,-1), this)",
"2" :  "(-1,-1, this)",
"3" :  "(-1,-1, this)",
"4" :  "(-1,-1, this)",
"5" :  "(-1,-1, this)",
"6" :  "(-1,(-1,-1), this.contentsCase_)",
"7" :  "(-1,(-1,-1), this.contentsCase_)"},{ "Name" : "setValueBytes" ,
"Duas" : 7,
"0" :  "(-1,-1, this)",
"1" :  "(-1,-1, this)",
"2" :  "(-1,-1, this)",
"3" :  "(-1,-1, this)",
"4" :  "(-1,(-1,-1), value)",
"5" :  "(-1,(-1,-1), value)",
"6" :  "(-1,-1, value)"},{ "Name" : "hasScore" ,
"Duas" : 4,
"0" :  "(-1,(-1,-1), this)",
"1" :  "(-1,(-1,-1), this)",
"2" :  "(-1,(-1,-1), this.bitField0_)",
"3" :  "(-1,(-1,-1), this.bitField0_)"}]
}
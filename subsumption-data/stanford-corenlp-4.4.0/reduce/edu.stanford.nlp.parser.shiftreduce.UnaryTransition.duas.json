{
"Class" : "edu.stanford.nlp.parser.shiftreduce.UnaryTransition", 
"Methods" : [{ "Name" : "isLegal" ,
"Duas" : 42,
"0" :  "(30,(37,39), this)",
"1" :  "(30,(37,41), this)",
"2" :  "(30,(55,55), this)",
"3" :  "(30,(55,61), this)",
"4" :  "(30,(41,42), this)",
"5" :  "(30,(41,44), this)",
"6" :  "(30,(30,31), state)",
"7" :  "(30,(30,33), state)",
"8" :  "(30,(33,34), state)",
"9" :  "(30,(33,36), state)",
"10" :  "(30,36, state)",
"11" :  "(30,(55,55), state)",
"12" :  "(30,(55,56), state)",
"13" :  "(30,(55,56), state)",
"14" :  "(30,(55,61), state)",
"15" :  "(30,(30,31), state.finished)",
"16" :  "(30,(30,33), state.finished)",
"17" :  "(30,(33,34), state.stack)",
"18" :  "(30,(33,36), state.stack)",
"19" :  "(30,36, state.stack)",
"20" :  "(30,(55,55), state.stack)",
"21" :  "(30,(55,56), state.stack)",
"22" :  "(30,(37,39), this.label)",
"23" :  "(30,(37,41), this.label)",
"24" :  "(30,(41,42), this.label)",
"25" :  "(30,(41,44), this.label)",
"26" :  "(30,(55,55), this.isRoot)",
"27" :  "(30,(55,61), this.isRoot)",
"28" :  "(36,(37,39), top)",
"29" :  "(36,(37,41), top)",
"30" :  "(36,(41,41), top)",
"31" :  "(36,(41,44), top)",
"32" :  "(36,(44,45), top)",
"33" :  "(36,(44,55), top)",
"34" :  "(36,45, top)",
"35" :  "(36,(41,42), top)",
"36" :  "(36,(41,44), top)",
"37" :  "(45,(46,47), child)",
"38" :  "(45,(46,55), child)",
"39" :  "(45,47, child)",
"40" :  "(47,(48,51), grandChild)",
"41" :  "(47,(48,55), grandChild)"},{ "Name" : "addUnaryNode" ,
"Duas" : 5,
"0" :  "(72,(72,73), top)",
"1" :  "(72,(72,75), top)",
"2" :  "(72,75, top)",
"3" :  "(72,75, top)",
"4" :  "(72,75, label)"},{ "Name" : "createNode" ,
"Duas" : 2,
"0" :  "(85,89, newTop)",
"1" :  "(85,87, newTop)"},{ "Name" : "equals" ,
"Duas" : 9,
"0" :  "(106,(106,107), this)",
"1" :  "(106,(106,109), this)",
"2" :  "(106,113, this)",
"3" :  "(106,(106,107), o)",
"4" :  "(106,(106,109), o)",
"5" :  "(106,(109,110), o)",
"6" :  "(106,(109,112), o)",
"7" :  "(106,112, o)",
"8" :  "(106,113, this.label)"},{ "Name" : "toString" ,
"Duas" : 6,
"0" :  "(123,(123,123), this)",
"1" :  "(123,(123,123), this)",
"2" :  "(123,123, this)",
"3" :  "(123,(123,123), this.isRoot)",
"4" :  "(123,(123,123), this.isRoot)",
"5" :  "(123,123, this.label)"}]
}
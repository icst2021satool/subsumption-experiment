{
"Class" : "edu.stanford.nlp.parser.lexparser.GrammarCompactor", 
"Methods" : [{ "Name" : "compactGrammar" ,
"Duas" : 52,
"0" :  "(67,(75,76), this)",
"1" :  "(67,(75,78), this)",
"2" :  "(67,102, this)",
"3" :  "(67,103, this)",
"4" :  "(67,(83,84), this)",
"5" :  "(67,(83,86), this)",
"6" :  "(67,94, this)",
"7" :  "(67,(96,97), this)",
"8" :  "(67,(96,99), this)",
"9" :  "(67,100, this)",
"10" :  "(67,86, allTrainPaths)",
"11" :  "(67,90, allTestPaths)",
"12" :  "(67,(75,76), this.verbose)",
"13" :  "(67,(75,78), this.verbose)",
"14" :  "(67,(83,84), this.verbose)",
"15" :  "(67,(83,86), this.verbose)",
"16" :  "(67,(96,97), this.verbose)",
"17" :  "(67,(96,99), this.verbose)",
"18" :  "(67,97, out)",
"19" :  "(67,84, out)",
"20" :  "(67,76, out)",
"21" :  "(67,103, this.newStateIndex)",
"22" :  "(71,102, unaryRules)",
"23" :  "(72,102, binaryRules)",
"24" :  "(73,79, graphs)",
"25" :  "(73,76, graphs)",
"26" :  "(74,102, this.compactedGraphs)",
"27" :  "(74,100, this.compactedGraphs)",
"28" :  "(78,95, i)",
"29" :  "(79,(79,80), graphIter)",
"30" :  "(79,(79,102), graphIter)",
"31" :  "(79,80, graphIter)",
"32" :  "(79,99, graphIter)",
"33" :  "(81,86, cat)",
"34" :  "(81,90, cat)",
"35" :  "(81,97, cat)",
"36" :  "(81,84, cat)",
"37" :  "(82,94, graph)",
"38" :  "(82,97, graph)",
"39" :  "(82,84, graph)",
"40" :  "(86,(87,88), trainPaths)",
"41" :  "(86,(87,90), trainPaths)",
"42" :  "(86,94, trainPaths)",
"43" :  "(88,94, trainPaths)",
"44" :  "(90,(91,92), testPaths)",
"45" :  "(90,(91,94), testPaths)",
"46" :  "(90,94, testPaths)",
"47" :  "(92,94, testPaths)",
"48" :  "(94,100, compactedGraph)",
"49" :  "(94,97, compactedGraph)",
"50" :  "(95,95, i)",
"51" :  "(95,97, i)"},{ "Name" : "computeInputPrior" ,
"Duas" : 2,
"0" :  "(107,115, result)",
"1" :  "(107,111, result)"},{ "Name" : "smartNegate" ,
"Duas" : 8,
"0" :  "(119,(119,120), this)",
"1" :  "(119,(119,122), this)",
"2" :  "(119,122, output)",
"3" :  "(119,120, output)",
"4" :  "(119,(119,120), NORMALIZED_LOG_PROBABILITIES)",
"5" :  "(119,(119,122), NORMALIZED_LOG_PROBABILITIES)",
"6" :  "(119,(119,120), this.outputType)",
"7" :  "(119,(119,122), this.outputType)"},{ "Name" : "writeFile" ,
"Duas" : 9,
"0" :  "(127,141, graph)",
"1" :  "(127,137, name)",
"2" :  "(127,(128,129), baseDir)",
"3" :  "(127,(128,133), baseDir)",
"4" :  "(127,(133,134), baseDir)",
"5" :  "(127,(133,137), baseDir)",
"6" :  "(127,137, baseDir)",
"7" :  "(127,(129,130), baseDir)",
"8" :  "(127,(129,137), baseDir)"},{ "Name" : "convertGrammarToGraphs" ,
"Duas" : 30,
"0" :  "(163,(188,189), this)",
"1" :  "(163,(188,192), this)",
"2" :  "(163,190, this)",
"3" :  "(163,181, this)",
"4" :  "(163,170, this)",
"5" :  "(163,185, unaryRules)",
"6" :  "(163,174, binaryRules)",
"7" :  "(163,(188,189), this.verbose)",
"8" :  "(163,(188,192), this.verbose)",
"9" :  "(163,189, out)",
"10" :  "(163,190, out)",
"11" :  "(163,190, this.stateIndex)",
"12" :  "(163,189, numRules)",
"13" :  "(163,180, numRules)",
"14" :  "(163,169, numRules)",
"15" :  "(164,179, ug)",
"16" :  "(166,192, graphs)",
"17" :  "(166,181, graphs)",
"18" :  "(166,170, graphs)",
"19" :  "(168,174, rule)",
"20" :  "(169,189, numRules)",
"21" :  "(169,180, numRules)",
"22" :  "(169,169, numRules)",
"23" :  "(170,(171,174), wasAdded)",
"24" :  "(170,(171,176), wasAdded)",
"25" :  "(179,185, rule)",
"26" :  "(180,189, numRules)",
"27" :  "(180,180, numRules)",
"28" :  "(181,(182,185), wasAdded)",
"29" :  "(181,(182,187), wasAdded)"},{ "Name" : "getGraphFromMap" ,
"Duas" : 7,
"0" :  "(196,200, m)",
"1" :  "(196,199, o)",
"2" :  "(196,200, o)",
"3" :  "(196,(197,198), graph)",
"4" :  "(196,(197,202), graph)",
"5" :  "(196,202, graph)",
"6" :  "(198,202, graph)"},{ "Name" : "getTopCategoryOfSyntheticState" ,
"Duas" : 8,
"0" :  "(206,(206,207), s)",
"1" :  "(206,(206,209), s)",
"2" :  "(206,209, s)",
"3" :  "(206,213, s)",
"4" :  "(206,211, s)",
"5" :  "(209,(210,211), bar)",
"6" :  "(209,(210,213), bar)",
"7" :  "(209,213, bar)"},{ "Name" : "addOneUnaryRule" ,
"Duas" : 17,
"0" :  "(218,229, this)",
"1" :  "(218,223, this)",
"2" :  "(218,229, rule)",
"3" :  "(218,223, rule)",
"4" :  "(218,228, graphs)",
"5" :  "(218,222, graphs)",
"6" :  "(218,(220,221), parentString)",
"7" :  "(218,(220,226), parentString)",
"8" :  "(218,228, parentString)",
"9" :  "(218,230, parentString)",
"10" :  "(218,231, parentString)",
"11" :  "(218,221, parentString)",
"12" :  "(218,224, parentString)",
"13" :  "(219,(226,228), childString)",
"14" :  "(219,(226,234), childString)",
"15" :  "(219,230, childString)",
"16" :  "(219,224, childString)"},{ "Name" : "addOneBinaryRule" ,
"Duas" : 44,
"0" :  "(240,(245,246), this)",
"1" :  "(240,(245,249), this)",
"2" :  "(240,260, this)",
"3" :  "(240,260, rule)",
"4" :  "(240,265, graphs)",
"5" :  "(240,(245,246), this.op)",
"6" :  "(240,(245,249), this.op)",
"7" :  "(240,(245,246), this.trainOptions)",
"8" :  "(240,(245,249), this.trainOptions)",
"9" :  "(240,(245,246), this.markFinalStates)",
"10" :  "(240,(245,249), this.markFinalStates)",
"11" :  "(240,259, parentString)",
"12" :  "(240,246, parentString)",
"13" :  "(241,(249,250), leftString)",
"14" :  "(241,(249,252), leftString)",
"15" :  "(241,254, leftString)",
"16" :  "(241,250, leftString)",
"17" :  "(242,(252,253), rightString)",
"18" :  "(242,(252,257), rightString)",
"19" :  "(242,253, rightString)",
"20" :  "(242,251, rightString)",
"21" :  "(244,(254,254), bracket)",
"22" :  "(244,(254,254), bracket)",
"23" :  "(244,254, bracket)",
"24" :  "(244,(251,251), bracket)",
"25" :  "(244,(251,251), bracket)",
"26" :  "(244,251, bracket)",
"27" :  "(246,(254,254), bracket)",
"28" :  "(246,(254,254), bracket)",
"29" :  "(246,254, bracket)",
"30" :  "(246,(251,251), bracket)",
"31" :  "(246,(251,251), bracket)",
"32" :  "(246,251, bracket)",
"33" :  "(250,261, source)",
"34" :  "(250,266, source)",
"35" :  "(251,266, input)",
"36" :  "(253,261, source)",
"37" :  "(253,266, source)",
"38" :  "(254,266, input)",
"39" :  "(259,266, target)",
"40" :  "(260,266, output)",
"41" :  "(261,(262,263), topcat)",
"42" :  "(261,(262,265), topcat)",
"43" :  "(261,265, topcat)"},{ "Name" : "isSyntheticState" ,
"Duas" : 2,
"0" :  "(271,(271,271), state)",
"1" :  "(271,(271,271), state)"},{ "Name" : "convertGraphsToGrammar" ,
"Duas" : 145,
"0" :  "(283,(337,341), this)",
"1" :  "(283,(337,349), this)",
"2" :  "(283,349, this)",
"3" :  "(283,351, this)",
"4" :  "(283,352, this)",
"5" :  "(283,(369,370), this)",
"6" :  "(283,(369,374), this)",
"7" :  "(283,371, this)",
"8" :  "(283,(362,363), this)",
"9" :  "(283,(362,366), this)",
"10" :  "(283,363, this)",
"11" :  "(283,364, this)",
"12" :  "(283,(354,355), this)",
"13" :  "(283,(354,358), this)",
"14" :  "(283,355, this)",
"15" :  "(283,345, this)",
"16" :  "(283,342, this)",
"17" :  "(283,315, this)",
"18" :  "(283,325, this)",
"19" :  "(283,327, this)",
"20" :  "(283,311, this)",
"21" :  "(283,291, this)",
"22" :  "(283,292, this)",
"23" :  "(283,293, this)",
"24" :  "(283,294, this)",
"25" :  "(283,295, this)",
"26" :  "(283,296, this)",
"27" :  "(283,285, this)",
"28" :  "(283,286, this)",
"29" :  "(283,287, this)",
"30" :  "(283,288, this)",
"31" :  "(283,300, graphs)",
"32" :  "(283,353, unaryRules)",
"33" :  "(283,341, unaryRules)",
"34" :  "(283,316, unaryRules)",
"35" :  "(283,312, unaryRules)",
"36" :  "(283,290, binaryRules)",
"37" :  "(283,361, binaryRules)",
"38" :  "(283,344, binaryRules)",
"39" :  "(283,331, binaryRules)",
"40" :  "(283,291, this.stateIndex)",
"41" :  "(283,293, this.stateIndex)",
"42" :  "(283,295, this.stateIndex)",
"43" :  "(283,285, this.stateIndex)",
"44" :  "(283,287, this.stateIndex)",
"45" :  "(283,(337,341), RAW_COUNTS)",
"46" :  "(283,(337,349), RAW_COUNTS)",
"47" :  "(283,(362,363), RAW_COUNTS)",
"48" :  "(283,(362,366), RAW_COUNTS)",
"49" :  "(283,(354,355), RAW_COUNTS)",
"50" :  "(283,(354,358), RAW_COUNTS)",
"51" :  "(283,(337,341), this.outputType)",
"52" :  "(283,(337,349), this.outputType)",
"53" :  "(283,(362,363), this.outputType)",
"54" :  "(283,(362,366), this.outputType)",
"55" :  "(283,(354,355), this.outputType)",
"56" :  "(283,(354,358), this.outputType)",
"57" :  "(283,364, this.op)",
"58" :  "(283,364, this.trainOptions)",
"59" :  "(283,364, this.ruleDiscount)",
"60" :  "(283,(369,370), this.verbose)",
"61" :  "(283,(369,374), this.verbose)",
"62" :  "(283,370, out)",
"63" :  "(283,371, out)",
"64" :  "(283,349, this.newStateIndex)",
"65" :  "(283,351, this.newStateIndex)",
"66" :  "(283,352, this.newStateIndex)",
"67" :  "(283,371, this.newStateIndex)",
"68" :  "(283,363, this.newStateIndex)",
"69" :  "(283,355, this.newStateIndex)",
"70" :  "(283,345, this.newStateIndex)",
"71" :  "(283,342, this.newStateIndex)",
"72" :  "(283,315, this.newStateIndex)",
"73" :  "(283,325, this.newStateIndex)",
"74" :  "(283,327, this.newStateIndex)",
"75" :  "(283,311, this.newStateIndex)",
"76" :  "(283,292, this.newStateIndex)",
"77" :  "(283,294, this.newStateIndex)",
"78" :  "(283,296, this.newStateIndex)",
"79" :  "(283,286, this.newStateIndex)",
"80" :  "(283,288, this.newStateIndex)",
"81" :  "(301,(309,311), startNode)",
"82" :  "(301,(309,313), startNode)",
"83" :  "(302,329, arc)",
"84" :  "(304,(309,311), source)",
"85" :  "(304,(309,313), source)",
"86" :  "(304,315, source)",
"87" :  "(304,325, source)",
"88" :  "(304,327, source)",
"89" :  "(305,315, target)",
"90" :  "(305,325, target)",
"91" :  "(305,327, target)",
"92" :  "(305,311, target)",
"93" :  "(307,(313,313), inputString)",
"94" :  "(307,(313,315), inputString)",
"95" :  "(307,(313,315), inputString)",
"96" :  "(307,(313,320), inputString)",
"97" :  "(307,320, inputString)",
"98" :  "(307,321, inputString)",
"99" :  "(307,322, inputString)",
"100" :  "(307,311, inputString)",
"101" :  "(308,315, output)",
"102" :  "(308,325, output)",
"103" :  "(308,327, output)",
"104" :  "(308,311, output)",
"105" :  "(321,(324,324), leftOrRight)",
"106" :  "(321,(324,325), leftOrRight)",
"107" :  "(321,(324,325), leftOrRight)",
"108" :  "(321,(324,326), leftOrRight)",
"109" :  "(321,(326,326), leftOrRight)",
"110" :  "(321,(326,327), leftOrRight)",
"111" :  "(321,(326,327), leftOrRight)",
"112" :  "(321,(326,329), leftOrRight)",
"113" :  "(322,325, inputString)",
"114" :  "(322,327, inputString)",
"115" :  "(325,331, br)",
"116" :  "(327,331, br)",
"117" :  "(336,363, symbolCounter)",
"118" :  "(336,355, symbolCounter)",
"119" :  "(336,345, symbolCounter)",
"120" :  "(336,342, symbolCounter)",
"121" :  "(350,370, numRules)",
"122" :  "(350,367, numRules)",
"123" :  "(350,359, numRules)",
"124" :  "(351,374, ug)",
"125" :  "(351,376, ug)",
"126" :  "(351,358, ug)",
"127" :  "(352,375, bg)",
"128" :  "(352,376, bg)",
"129" :  "(352,366, bg)",
"130" :  "(353,358, rule)",
"131" :  "(353,355, rule)",
"132" :  "(353,356, rule)",
"133" :  "(353,355, rule.parent)",
"134" :  "(353,356, rule.score)",
"135" :  "(359,370, numRules)",
"136" :  "(359,367, numRules)",
"137" :  "(359,359, numRules)",
"138" :  "(361,366, rule)",
"139" :  "(361,363, rule)",
"140" :  "(361,364, rule)",
"141" :  "(361,363, rule.parent)",
"142" :  "(361,364, rule.score)",
"143" :  "(367,370, numRules)",
"144" :  "(367,367, numRules)"}]
}
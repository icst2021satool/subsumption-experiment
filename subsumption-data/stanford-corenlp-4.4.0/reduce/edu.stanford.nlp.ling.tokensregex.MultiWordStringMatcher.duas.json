{
"Class" : "edu.stanford.nlp.ling.tokensregex.MultiWordStringMatcher", 
"Methods" : [{ "Name" : "setMatchType" ,
"Duas" : 11,
"0" :  "(43,44, this)",
"1" :  "(43,45, this)",
"2" :  "(43,(44,44), matchType)",
"3" :  "(43,(44,44), matchType)",
"4" :  "(43,(44,44), matchType)",
"5" :  "(43,(44,44), matchType)",
"6" :  "(43,(44,44), EXCT)",
"7" :  "(43,(44,44), EXCT)",
"8" :  "(43,(44,44), EXCTWS)",
"9" :  "(43,(44,44), EXCTWS)",
"10" :  "(43,45, this.targetStringPatternCache)"},{ "Name" : "markTargetString" ,
"Duas" : 73,
"0" :  "(59,(73,74), targetString)",
"1" :  "(59,(73,81), targetString)",
"2" :  "(59,94, targetString)",
"3" :  "(59,86, targetString)",
"4" :  "(59,74, targetString)",
"5" :  "(59,83, beginMark)",
"6" :  "(59,84, beginMark)",
"7" :  "(59,88, endMark)",
"8" :  "(59,89, endMark)",
"9" :  "(59,(63,63), markOnlyIfSpace)",
"10" :  "(59,(63,63), markOnlyIfSpace)",
"11" :  "(59,(64,64), markOnlyIfSpace)",
"12" :  "(59,(64,64), markOnlyIfSpace)",
"13" :  "(59,96, sb)",
"14" :  "(59,(73,74), sb)",
"15" :  "(59,(73,81), sb)",
"16" :  "(59,94, sb)",
"17" :  "(59,88, sb)",
"18" :  "(59,83, sb)",
"19" :  "(59,74, sb)",
"20" :  "(59,66, sb)",
"21" :  "(60,(61,62), i)",
"22" :  "(60,(61,96), i)",
"23" :  "(60,(65,66), i)",
"24" :  "(60,(65,73), i)",
"25" :  "(60,(73,74), i)",
"26" :  "(60,(73,81), i)",
"27" :  "(60,92, i)",
"28" :  "(60,86, i)",
"29" :  "(60,83, i)",
"30" :  "(60,84, i)",
"31" :  "(60,74, i)",
"32" :  "(60,66, i)",
"33" :  "(62,(81,82), matched)",
"34" :  "(62,(81,92), matched)",
"35" :  "(63,(82,83), markBefore)",
"36" :  "(63,(82,86), markBefore)",
"37" :  "(64,(87,88), markAfter)",
"38" :  "(64,(87,94), markAfter)",
"39" :  "(66,(67,68), charBefore)",
"40" :  "(66,(67,69), charBefore)",
"41" :  "(66,(69,70), charBefore)",
"42" :  "(66,(69,73), charBefore)",
"43" :  "(68,(81,82), matched)",
"44" :  "(68,(81,92), matched)",
"45" :  "(70,(82,83), markBefore)",
"46" :  "(70,(82,86), markBefore)",
"47" :  "(74,(75,76), charAfter)",
"48" :  "(74,(75,77), charAfter)",
"49" :  "(74,(77,78), charAfter)",
"50" :  "(74,(77,81), charAfter)",
"51" :  "(76,(81,82), matched)",
"52" :  "(76,(81,92), matched)",
"53" :  "(78,(87,88), markAfter)",
"54" :  "(78,(87,94), markAfter)",
"55" :  "(84,86, i)",
"56" :  "(86,94, i)",
"57" :  "(86,88, i)",
"58" :  "(86,89, i)",
"59" :  "(89,94, i)",
"60" :  "(92,94, i)",
"61" :  "(94,(61,62), i)",
"62" :  "(94,(61,96), i)",
"63" :  "(94,(65,66), i)",
"64" :  "(94,(65,73), i)",
"65" :  "(94,(73,74), i)",
"66" :  "(94,(73,81), i)",
"67" :  "(94,92, i)",
"68" :  "(94,86, i)",
"69" :  "(94,83, i)",
"70" :  "(94,84, i)",
"71" :  "(94,74, i)",
"72" :  "(94,66, i)"},{ "Name" : "findTargetStringOffsetsExct" ,
"Duas" : 72,
"0" :  "(111,(111,111), text)",
"1" :  "(111,(111,112), text)",
"2" :  "(111,(112,112), text)",
"3" :  "(111,(112,113), text)",
"4" :  "(111,114, text)",
"5" :  "(111,(124,125), text)",
"6" :  "(111,(124,130), text)",
"7" :  "(111,136, text)",
"8" :  "(111,125, text)",
"9" :  "(111,119, text)",
"10" :  "(111,114, targetString)",
"11" :  "(111,(124,125), targetString)",
"12" :  "(111,(124,130), targetString)",
"13" :  "(111,136, targetString)",
"14" :  "(111,131, targetString)",
"15" :  "(111,132, targetString)",
"16" :  "(111,125, targetString)",
"17" :  "(111,(111,111), start)",
"18" :  "(111,(111,112), start)",
"19" :  "(111,114, start)",
"20" :  "(111,(112,112), end)",
"21" :  "(111,(112,113), end)",
"22" :  "(111,(116,117), end)",
"23" :  "(111,(116,138), end)",
"24" :  "(111,(115,115), end)",
"25" :  "(111,(115,116), end)",
"26" :  "(113,138, offsets)",
"27" :  "(113,131, offsets)",
"28" :  "(114,(115,115), i)",
"29" :  "(114,(115,116), i)",
"30" :  "(114,(116,116), i)",
"31" :  "(114,(116,138), i)",
"32" :  "(114,(116,117), i)",
"33" :  "(114,(116,138), i)",
"34" :  "(114,(118,119), i)",
"35" :  "(114,(118,124), i)",
"36" :  "(114,(124,125), i)",
"37" :  "(114,(124,130), i)",
"38" :  "(114,134, i)",
"39" :  "(114,131, i)",
"40" :  "(114,132, i)",
"41" :  "(114,125, i)",
"42" :  "(114,119, i)",
"43" :  "(114,(115,115), i)",
"44" :  "(114,(115,116), i)",
"45" :  "(115,138, offsets)",
"46" :  "(115,131, offsets)",
"47" :  "(117,(130,131), matched)",
"48" :  "(117,(130,134), matched)",
"49" :  "(119,(120,121), charBefore)",
"50" :  "(119,(120,124), charBefore)",
"51" :  "(121,(130,131), matched)",
"52" :  "(121,(130,134), matched)",
"53" :  "(125,(126,127), charAfter)",
"54" :  "(125,(126,130), charAfter)",
"55" :  "(127,(130,131), matched)",
"56" :  "(127,(130,134), matched)",
"57" :  "(132,136, i)",
"58" :  "(134,136, i)",
"59" :  "(136,(116,116), i)",
"60" :  "(136,(116,138), i)",
"61" :  "(136,(116,117), i)",
"62" :  "(136,(116,138), i)",
"63" :  "(136,(118,119), i)",
"64" :  "(136,(118,124), i)",
"65" :  "(136,(124,125), i)",
"66" :  "(136,(124,130), i)",
"67" :  "(136,134, i)",
"68" :  "(136,131, i)",
"69" :  "(136,132, i)",
"70" :  "(136,125, i)",
"71" :  "(136,119, i)"},{ "Name" : "getRegex" ,
"Duas" : 7,
"0" :  "(162,170, this)",
"1" :  "(165,172, sb)",
"2" :  "(165,(167,168), sb)",
"3" :  "(165,(167,170), sb)",
"4" :  "(165,170, sb)",
"5" :  "(165,168, sb)",
"6" :  "(166,170, s)"},{ "Name" : "getPattern" ,
"Duas" : 9,
"0" :  "(178,180, this)",
"1" :  "(178,181, this)",
"2" :  "(178,180, targetString)",
"3" :  "(178,181, targetString)",
"4" :  "(178,181, this.targetStringPatternCache)",
"5" :  "(178,(179,180), pattern)",
"6" :  "(178,(179,183), pattern)",
"7" :  "(178,183, pattern)",
"8" :  "(180,183, pattern)"},{ "Name" : "getRegex" ,
"Duas" : 28,
"0" :  "(193,(193,200), this)",
"1" :  "(193,(193,194), this)",
"2" :  "(193,(193,195), this)",
"3" :  "(193,(193,196), this)",
"4" :  "(193,(193,197), this)",
"5" :  "(193,(193,198), this)",
"6" :  "(193,198, targetString)",
"7" :  "(193,197, targetString)",
"8" :  "(193,196, targetString)",
"9" :  "(193,195, targetString)",
"10" :  "(193,194, targetString)",
"11" :  "(193,(193,200), $SwitchMap$edu$stanford$nlp$ling$tokensregex$MultiWordStringMatcher$MatchType)",
"12" :  "(193,(193,194), $SwitchMap$edu$stanford$nlp$ling$tokensregex$MultiWordStringMatcher$MatchType)",
"13" :  "(193,(193,195), $SwitchMap$edu$stanford$nlp$ling$tokensregex$MultiWordStringMatcher$MatchType)",
"14" :  "(193,(193,196), $SwitchMap$edu$stanford$nlp$ling$tokensregex$MultiWordStringMatcher$MatchType)",
"15" :  "(193,(193,197), $SwitchMap$edu$stanford$nlp$ling$tokensregex$MultiWordStringMatcher$MatchType)",
"16" :  "(193,(193,198), $SwitchMap$edu$stanford$nlp$ling$tokensregex$MultiWordStringMatcher$MatchType)",
"17" :  "(193,(193,200), this.matchType)",
"18" :  "(193,(193,194), this.matchType)",
"19" :  "(193,(193,195), this.matchType)",
"20" :  "(193,(193,196), this.matchType)",
"21" :  "(193,(193,197), this.matchType)",
"22" :  "(193,(193,198), this.matchType)",
"23" :  "(194,202, wordRegex)",
"24" :  "(195,202, wordRegex)",
"25" :  "(196,202, wordRegex)",
"26" :  "(197,202, wordRegex)",
"27" :  "(198,202, wordRegex)"},{ "Name" : "getExctWsRegex" ,
"Duas" : 12,
"0" :  "(209,219, whitespacePattern)",
"1" :  "(209,217, punctWhitespacePattern)",
"2" :  "(209,227, sb)",
"3" :  "(209,(213,214), sb)",
"4" :  "(209,(213,217), sb)",
"5" :  "(209,(221,222), sb)",
"6" :  "(209,(221,224), sb)",
"7" :  "(209,224, sb)",
"8" :  "(209,222, sb)",
"9" :  "(209,214, sb)",
"10" :  "(211,217, field)",
"11" :  "(220,224, f)"},{ "Name" : "getLnrmRegex" ,
"Duas" : 9,
"0" :  "(238,243, lnrmDelimPatternAny)",
"1" :  "(238,249, sb)",
"2" :  "(238,247, sb)",
"3" :  "(238,243, sb)",
"4" :  "(240,(242,243), first)",
"5" :  "(240,(242,245), first)",
"6" :  "(241,247, field)",
"7" :  "(245,(242,243), first)",
"8" :  "(245,(242,245), first)"},{ "Name" : "findTargetStringOffsetsRegex" ,
"Duas" : 13,
"0" :  "(264,266, this)",
"1" :  "(264,(264,264), text)",
"2" :  "(264,(264,265), text)",
"3" :  "(264,(265,265), text)",
"4" :  "(264,(265,266), text)",
"5" :  "(264,267, text)",
"6" :  "(264,266, targetString)",
"7" :  "(264,(264,264), start)",
"8" :  "(264,(264,265), start)",
"9" :  "(264,267, start)",
"10" :  "(264,(265,265), end)",
"11" :  "(264,(265,266), end)",
"12" :  "(264,267, end)"},{ "Name" : "findOffsets" ,
"Duas" : 53,
"0" :  "(293,(307,308), text)",
"1" :  "(293,(307,313), text)",
"2" :  "(293,308, text)",
"3" :  "(293,302, text)",
"4" :  "(293,(298,299), end)",
"5" :  "(293,(298,318), end)",
"6" :  "(293,(297,297), end)",
"7" :  "(293,(297,298), end)",
"8" :  "(293,(296,296), matcher)",
"9" :  "(293,(296,296), matcher)",
"10" :  "(293,296, matcher)",
"11" :  "(293,300, matcher)",
"12" :  "(293,(316,316), matcher)",
"13" :  "(293,(316,316), matcher)",
"14" :  "(293,316, matcher)",
"15" :  "(294,318, offsets)",
"16" :  "(294,314, offsets)",
"17" :  "(296,(297,297), i)",
"18" :  "(296,(297,298), i)",
"19" :  "(296,(298,298), i)",
"20" :  "(296,(298,318), i)",
"21" :  "(296,(298,299), i)",
"22" :  "(296,(298,318), i)",
"23" :  "(296,(301,302), i)",
"24" :  "(296,(301,307), i)",
"25" :  "(296,314, i)",
"26" :  "(296,302, i)",
"27" :  "(296,(297,297), i)",
"28" :  "(296,(297,298), i)",
"29" :  "(297,318, offsets)",
"30" :  "(297,314, offsets)",
"31" :  "(299,(313,314), matched)",
"32" :  "(299,(313,316), matched)",
"33" :  "(300,(307,308), matchEnd)",
"34" :  "(300,(307,313), matchEnd)",
"35" :  "(300,314, matchEnd)",
"36" :  "(300,308, matchEnd)",
"37" :  "(302,(303,304), charBefore)",
"38" :  "(302,(303,307), charBefore)",
"39" :  "(304,(313,314), matched)",
"40" :  "(304,(313,316), matched)",
"41" :  "(308,(309,310), charAfter)",
"42" :  "(308,(309,313), charAfter)",
"43" :  "(310,(313,314), matched)",
"44" :  "(310,(313,316), matched)",
"45" :  "(316,(298,298), i)",
"46" :  "(316,(298,318), i)",
"47" :  "(316,(298,299), i)",
"48" :  "(316,(298,318), i)",
"49" :  "(316,(301,302), i)",
"50" :  "(316,(301,307), i)",
"51" :  "(316,314, i)",
"52" :  "(316,302, i)"},{ "Name" : "findTargetStringOffsets" ,
"Duas" : 15,
"0" :  "(346,(346,348), this)",
"1" :  "(346,(346,347), this)",
"2" :  "(346,348, this)",
"3" :  "(346,347, text)",
"4" :  "(346,348, text)",
"5" :  "(346,347, targetString)",
"6" :  "(346,348, targetString)",
"7" :  "(346,347, start)",
"8" :  "(346,348, start)",
"9" :  "(346,347, end)",
"10" :  "(346,348, end)",
"11" :  "(346,(346,348), $SwitchMap$edu$stanford$nlp$ling$tokensregex$MultiWordStringMatcher$MatchType)",
"12" :  "(346,(346,347), $SwitchMap$edu$stanford$nlp$ling$tokensregex$MultiWordStringMatcher$MatchType)",
"13" :  "(346,(346,348), this.matchType)",
"14" :  "(346,(346,347), this.matchType)"}]
}
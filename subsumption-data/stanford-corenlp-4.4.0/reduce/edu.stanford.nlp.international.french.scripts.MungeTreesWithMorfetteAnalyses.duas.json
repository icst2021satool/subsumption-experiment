{
"Class" : "edu.stanford.nlp.international.french.scripts.MungeTreesWithMorfetteAnalyses", 
"Methods" : [{ "Name" : "main" ,
"Duas" : 41,
"0" :  "(116,(116,117), args)",
"1" :  "(116,(116,121), args)",
"2" :  "(116,121, args)",
"3" :  "(116,122, args)",
"4" :  "(116,117, err)",
"5" :  "(116,(130,130), $assertionsDisabled)",
"6" :  "(116,(130,132), $assertionsDisabled)",
"7" :  "(116,144, out)",
"8" :  "(116,148, log)",
"9" :  "(125,127, tr)",
"10" :  "(125,(127,127), tr)",
"11" :  "(125,(127,147), tr)",
"12" :  "(125,(147,147), tr)",
"13" :  "(125,(147,148), tr)",
"14" :  "(125,151, tr)",
"15" :  "(126,(147,148), morfetteItr)",
"16" :  "(126,(147,151), morfetteItr)",
"17" :  "(126,(127,128), morfetteItr)",
"18" :  "(126,(127,147), morfetteItr)",
"19" :  "(126,128, morfetteItr)",
"20" :  "(127,129, tree)",
"21" :  "(127,144, tree)",
"22" :  "(128,134, analysis)",
"23" :  "(128,(130,130), analysis)",
"24" :  "(128,(130,132), analysis)",
"25" :  "(129,132, yield)",
"26" :  "(129,135, yield)",
"27" :  "(129,(130,130), yield)",
"28" :  "(129,(130,132), yield)",
"29" :  "(132,(133,134), yieldLen)",
"30" :  "(132,(133,144), yieldLen)",
"31" :  "(133,(133,134), i)",
"32" :  "(133,(133,144), i)",
"33" :  "(133,134, i)",
"34" :  "(133,135, i)",
"35" :  "(133,133, i)",
"36" :  "(133,(133,134), i)",
"37" :  "(133,(133,144), i)",
"38" :  "(133,134, i)",
"39" :  "(133,135, i)",
"40" :  "(133,133, i)"},{ "Name" : "getLemma" ,
"Duas" : 23,
"0" :  "(165,(167,167), rawToken)",
"1" :  "(165,(167,167), rawToken)",
"2" :  "(165,168, rawToken)",
"3" :  "(165,170, rawToken)",
"4" :  "(165,(167,167), rawToken)",
"5" :  "(165,(167,167), rawToken)",
"6" :  "(165,(167,167), rawToken)",
"7" :  "(165,(167,167), rawToken)",
"8" :  "(165,(167,167), rawToken)",
"9" :  "(165,(167,167), rawToken)",
"10" :  "(165,176, lemma)",
"11" :  "(165,173, lemma)",
"12" :  "(165,174, lemma)",
"13" :  "(165,168, pIsPunct)",
"14" :  "(165,(172,173), isUpper)",
"15" :  "(165,(172,176), isUpper)",
"16" :  "(166,(169,170), isAllUpper)",
"17" :  "(166,(169,172), isAllUpper)",
"18" :  "(167,(169,169), isParen)",
"19" :  "(167,(169,170), isParen)",
"20" :  "(168,(169,169), isPunc)",
"21" :  "(168,(169,170), isPunc)",
"22" :  "(174,176, lemma)"}]
}
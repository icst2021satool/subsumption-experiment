{
"Class" : "edu.stanford.nlp.util.CollectionUtils", 
"Methods" : [{ "Name" : "asList" ,
"Nodes" : 5,
"0" : [ ],
"1" : [ ],
"2" : [ 0],
"4" : [ 0],
"3" : [ 1],
"CoveredDUAsByNodes" : 2,
"Duas" : 2
},{ "Name" : "asList" ,
"Nodes" : 5,
"0" : [ ],
"1" : [ ],
"2" : [ 0],
"4" : [ 0],
"3" : [ 1],
"CoveredDUAsByNodes" : 2,
"Duas" : 2
},{ "Name" : "asIntArray" ,
"Nodes" : 5,
"0" : [ ],
"1" : [ ],
"2" : [ 0],
"4" : [ 0],
"3" : [ 1, 2, 3],
"CoveredDUAsByNodes" : 4,
"Duas" : 6
},{ "Name" : "asDoubleArray" ,
"Nodes" : 5,
"0" : [ ],
"1" : [ ],
"2" : [ 0],
"4" : [ 0],
"3" : [ 1, 2, 3],
"CoveredDUAsByNodes" : 4,
"Duas" : 6
},{ "Name" : "intersection" ,
"Nodes" : 7,
"0" : [ ],
"1" : [ ],
"2" : [ 2],
"6" : [ 2],
"3" : [ ],
"5" : [ 0, 3, 4, 6],
"4" : [ ],
"CoveredDUAsByNodes" : 5,
"Duas" : 7
},{ "Name" : "union" ,
"Nodes" : 8,
"0" : [ ],
"1" : [ ],
"2" : [ 0],
"3" : [ 0],
"4" : [ 0, 1],
"7" : [ 0, 1],
"5" : [ 0, 2],
"6" : [ 3],
"CoveredDUAsByNodes" : 4,
"Duas" : 4
},{ "Name" : "unionAsSet" ,
"Nodes" : 8,
"0" : [ ],
"1" : [ ],
"2" : [ 0],
"3" : [ 0],
"4" : [ 0, 1],
"7" : [ 0, 1],
"5" : [ 0, 2],
"6" : [ 3],
"CoveredDUAsByNodes" : 4,
"Duas" : 4
},{ "Name" : "unionAsSet" ,
"Nodes" : 8,
"0" : [ ],
"1" : [ ],
"2" : [ 0],
"7" : [ 0],
"3" : [ ],
"4" : [ ],
"5" : [ ],
"6" : [ 1],
"CoveredDUAsByNodes" : 2,
"Duas" : 2
},{ "Name" : "diff" ,
"Nodes" : 7,
"0" : [ ],
"1" : [ ],
"2" : [ 2],
"6" : [ 2],
"3" : [ ],
"5" : [ 0, 3, 4, 6],
"4" : [ ],
"CoveredDUAsByNodes" : 5,
"Duas" : 7
},{ "Name" : "diffAsSet" ,
"Nodes" : 7,
"0" : [ ],
"1" : [ ],
"2" : [ 2],
"6" : [ 2],
"3" : [ ],
"5" : [ 0, 3, 4, 6],
"4" : [ ],
"CoveredDUAsByNodes" : 5,
"Duas" : 7
},{ "Name" : "loadCollection" ,
"Nodes" : 6,
"0" : [ ],
"1" : [ ],
"3" : [ 5],
"2" : [ 1, 3],
"5" : [ 1, 3],
"4" : [ 0, 2, 4, 5, 7, 9],
"CoveredDUAsByNodes" : 8,
"Duas" : 15
},{ "Name" : "loadCollection" ,
"Nodes" : 6,
"0" : [ ],
"1" : [ ],
"3" : [ 4],
"2" : [ 2],
"5" : [ 2],
"4" : [ 0, 1, 3, 4, 6, 8],
"CoveredDUAsByNodes" : 7,
"Duas" : 14
},{ "Name" : "getMapFromString" ,
"Nodes" : 10,
"0" : [ ],
"1" : [ 1, 2, 3],
"2" : [ 1, 2, 3],
"3" : [ 1, 2, 3, 8, 11],
"4" : [ 16, 1, 2, 3, 4, 7, 9, 10, 13, 15],
"5" : [ 16, 1, 2, 3, 19, 4, 5, 7, 9, 10, 13, 15],
"7" : [ 1, 2, 3, 4, 6, 7, 9, 10, 13, 15, 16, 18, 20],
"6" : [ 1, 2, 3, 4, 7, 9, 10, 12, 13, 15, 16, 17, 21],
"8" : [ 0],
"9" : [ ],
"CoveredDUAsByNodes" : 21,
"Duas" : 29
},{ "Name" : "containsObject" ,
"Nodes" : 7,
"0" : [ ],
"1" : [ ],
"2" : [ ],
"3" : [ ],
"4" : [ 1, 3],
"5" : [ 0, 2],
"6" : [ ],
"CoveredDUAsByNodes" : 4,
"Duas" : 4
},{ "Name" : "removeObject" ,
"Nodes" : 7,
"0" : [ ],
"1" : [ ],
"2" : [ ],
"3" : [ ],
"4" : [ 2, 3, 6],
"5" : [ 0, 1, 5],
"6" : [ ],
"CoveredDUAsByNodes" : 6,
"Duas" : 9
},{ "Name" : "getIndex" ,
"Nodes" : 7,
"0" : [ ],
"1" : [ ],
"2" : [ ],
"3" : [ ],
"4" : [ 1, 2, 5],
"5" : [ 0, 4],
"6" : [ ],
"CoveredDUAsByNodes" : 5,
"Duas" : 8
},{ "Name" : "getIndex" ,
"Nodes" : 9,
"0" : [ ],
"1" : [ ],
"2" : [ ],
"3" : [ 4],
"4" : [ 3, 4, 8],
"5" : [ 1, 3, 4, 6, 8],
"6" : [ 0, 3, 4, 5, 8, 10],
"8" : [ ],
"7" : [ 2, 4, 7],
"CoveredDUAsByNodes" : 10,
"Duas" : 11
},{ "Name" : "sampleWithoutReplacement" ,
"Nodes" : 9,
"0" : [ ],
"1" : [ 6],
"2" : [ 1, 2, 3, 6, 8, 9],
"3" : [ 1, 2, 3, 6, 8, 9],
"4" : [ 1, 17, 2, 3, 6, 8, 9, 11],
"5" : [ 1, 2, 3, 6, 8, 9, 10, 14, 15, 16, 18, 19, 21],
"6" : [ 0, 4, 6, 7, 12],
"7" : [ 5, 13],
"8" : [ ],
"CoveredDUAsByNodes" : 21,
"Duas" : 25
},{ "Name" : "sampleWithReplacement" ,
"Nodes" : 7,
"0" : [ ],
"1" : [ 0, 1, 3, 4],
"2" : [ 0, 1, 3, 4],
"3" : [ 0, 1, 3, 4, 6, 11],
"4" : [ 0, 1, 3, 4, 5, 8, 9, 10, 12, 13, 15],
"5" : [ 2, 7],
"6" : [ ],
"CoveredDUAsByNodes" : 15,
"Duas" : 19
},{ "Name" : "isSubList" ,
"Nodes" : 15,
"0" : [ ],
"1" : [ ],
"2" : [ ],
"3" : [ ],
"4" : [ 1, 2],
"5" : [ 1, 2],
"12" : [ 1, 2],
"6" : [ 1, 2],
"8" : [ 1, 2],
"7" : [ 1, 2],
"9" : [ 1, 2],
"10" : [ 1, 2, 4, 5],
"11" : [ 1, 2, 3],
"13" : [ 0],
"14" : [ ],
"CoveredDUAsByNodes" : 6,
"Duas" : 22
},{ "Name" : "toVerticalString" ,
"Nodes" : 5,
"0" : [ ],
"1" : [ ],
"2" : [ 0],
"4" : [ 0],
"3" : [ 1],
"CoveredDUAsByNodes" : 2,
"Duas" : 2
},{ "Name" : "compareLists" ,
"Nodes" : 17,
"0" : [ ],
"14" : [ 0],
"1" : [ ],
"3" : [ 2],
"4" : [ 2, 4, 7, 8],
"5" : [ 2, 4, 7, 8],
"6" : [ 2, 4, 21, 7, 8],
"7" : [ 17, 2, 4, 21, 7, 8, 13],
"8" : [ 17, 2, 19, 4, 21, 7, 8, 13, 15],
"9" : [ 17, 2, 18, 4, 21, 7, 8, 13, 14],
"10" : [ 16, 2, 4, 21, 7, 8, 12],
"11" : [ 2, 4, 20, 5, 22, 7, 8, 24, 9],
"12" : [ 2, 4, 20, 5, 22, 7, 8, 24, 9, 25, 27],
"13" : [ 2, 4, 20, 5, 22, 7, 8, 24, 9, 26, 28],
"2" : [ ],
"15" : [ 0, 10],
"16" : [ ],
"CoveredDUAsByNodes" : 24,
"Duas" : 33
},{ "Name" : "addAll" ,
"Nodes" : 5,
"0" : [ ],
"1" : [ ],
"2" : [ ],
"4" : [ ],
"3" : [ 0],
"CoveredDUAsByNodes" : 1,
"Duas" : 1
},{ "Name" : "getNGrams" ,
"Nodes" : 13,
"0" : [ ],
"1" : [ ],
"2" : [ 4, 7],
"12" : [ 4, 7],
"3" : [ 1, 6, 10],
"4" : [ 1, 6, 10],
"5" : [ 1, 3, 6, 10, 12],
"6" : [ 1, 2, 18, 6, 10],
"8" : [ 1, 2, 18, 6, 8, 10],
"9" : [ 1, 2, 18, 6, 8, 10],
"10" : [ 1, 2, 18, 5, 6, 8, 25, 10],
"7" : [ 1, 2, 18, 6, 22, 10],
"11" : [ 0, 1, 2, 18, 6, 8, 10, 26, 27, 29, 30],
"CoveredDUAsByNodes" : 18,
"Duas" : 50
},{ "Name" : "getPrefixesAndSuffixes" ,
"Nodes" : 26,
"0" : [ ],
"23" : [ 19],
"1" : [ ],
"21" : [ 21],
"2" : [ ],
"18" : [ 23],
"19" : [ 23, 13],
"3" : [ 2],
"4" : [ 2],
"5" : [ 2, 8, 25],
"6" : [ 2, 7, 27],
"15" : [ 2, 7, 11, 27],
"16" : [ 2, 7, 11, 27],
"7" : [ 2, 7, 27],
"12" : [ 1, 2, 7, 27, 15],
"13" : [ 1, 2, 7, 27, 15],
"8" : [ 33, 2, 7, 27],
"9" : [ 33, 2, 7, 27],
"10" : [ 33, 2, 36, 7, 26, 27, 29],
"11" : [ 0, 33, 2, 37, 7, 27],
"14" : [ 1, 49, 2, 34, 50, 7, 27, 46, 15, 47],
"17" : [ 2, 35, 38, 7, 40, 41, 11, 27],
"20" : [ 17, 23, 13],
"22" : [ 3, 21, 9],
"24" : [ 19, 5],
"25" : [ ],
"CoveredDUAsByNodes" : 31,
"Duas" : 61
},{ "Name" : "mergeList" ,
"Nodes" : 5,
"0" : [ ],
"1" : [ ],
"2" : [ 0, 2, 3],
"4" : [ 0, 2, 3],
"3" : [ 1, 4],
"CoveredDUAsByNodes" : 5,
"Duas" : 5
},{ "Name" : "mergeListWithSortedMatched" ,
"Nodes" : 9,
"0" : [ ],
"1" : [ ],
"2" : [ ],
"4" : [ 0, 2, 7],
"3" : [ 6],
"8" : [ 6],
"5" : [ ],
"7" : [ 16, 18, 3, 19, 4, 20, 5, 21, 8, 9, 13, 15],
"6" : [ ],
"CoveredDUAsByNodes" : 16,
"Duas" : 28
},{ "Name" : "mergeListWithSortedMatchedPreAggregated" ,
"Nodes" : 9,
"0" : [ ],
"1" : [ ],
"2" : [ ],
"4" : [ 0, 2, 6],
"3" : [ 5],
"8" : [ 5],
"5" : [ 4],
"7" : [ 16, 18, 3, 19, 4, 7, 8, 12, 14, 15],
"6" : [ 4],
"CoveredDUAsByNodes" : 14,
"Duas" : 26
},{ "Name" : "flatten" ,
"Nodes" : 5,
"0" : [ ],
"1" : [ ],
"2" : [ 0],
"4" : [ 0],
"3" : [ 1],
"CoveredDUAsByNodes" : 2,
"Duas" : 2
},{ "Name" : "uniqueNonhashableObjects" ,
"Nodes" : 5,
"0" : [ ],
"1" : [ ],
"2" : [ 1],
"4" : [ 1],
"3" : [ 0, 2],
"CoveredDUAsByNodes" : 3,
"Duas" : 3
},{ "Name" : "containsAny" ,
"Nodes" : 7,
"0" : [ ],
"1" : [ ],
"2" : [ ],
"3" : [ ],
"4" : [ 1, 3],
"5" : [ 0, 2],
"6" : [ ],
"CoveredDUAsByNodes" : 4,
"Duas" : 4
},{ "Name" : "partitionIntoFolds" ,
"Nodes" : 7,
"0" : [ ],
"1" : [ ],
"2" : [ 2, 3],
"6" : [ 2, 3],
"3" : [ 1, 13],
"5" : [ 1, 6, 13],
"4" : [ 0, 1, 17, 4, 5, 8, 13],
"CoveredDUAsByNodes" : 10,
"Duas" : 31
},{ "Name" : "trainTestFoldsForCV" ,
"Nodes" : 10,
"0" : [ ],
"1" : [ ],
"2" : [ 1, 4],
"9" : [ 1, 4],
"3" : [ 0, 6, 8, 10],
"4" : [ 0, 6, 8, 10],
"5" : [ 0, 3, 5, 6, 8, 10, 11, 14, 15],
"6" : [ 0, 17, 2, 6, 8, 10],
"8" : [ 0, 16, 17, 2, 6, 7, 8, 10],
"7" : [ 0, 17, 2, 21, 6, 8, 10],
"CoveredDUAsByNodes" : 16,
"Duas" : 35
},{ "Name" : "transformAsSet" ,
"Nodes" : 5,
"0" : [ ],
"1" : [ ],
"2" : [ 1],
"4" : [ 1],
"3" : [ 0, 2],
"CoveredDUAsByNodes" : 3,
"Duas" : 3
},{ "Name" : "transformAsList" ,
"Nodes" : 5,
"0" : [ ],
"1" : [ ],
"2" : [ 1],
"4" : [ 1],
"3" : [ 0, 2],
"CoveredDUAsByNodes" : 3,
"Duas" : 3
},{ "Name" : "filterAsList" ,
"Nodes" : 7,
"0" : [ ],
"1" : [ ],
"2" : [ 2],
"6" : [ 2],
"3" : [ ],
"5" : [ 0, 3, 4, 6],
"4" : [ ],
"CoveredDUAsByNodes" : 5,
"Duas" : 7
},{ "Name" : "getAll" ,
"Nodes" : 7,
"0" : [ ],
"1" : [ ],
"2" : [ 3],
"6" : [ 3],
"3" : [ ],
"5" : [ 0, 2, 4, 5, 7],
"4" : [ ],
"CoveredDUAsByNodes" : 6,
"Duas" : 8
},{ "Name" : "maxIndex" ,
"Nodes" : 8,
"0" : [ ],
"1" : [ ],
"2" : [ ],
"7" : [ ],
"3" : [ ],
"6" : [ ],
"4" : [ 7],
"5" : [ 5],
"CoveredDUAsByNodes" : 2,
"Duas" : 17
}]
}
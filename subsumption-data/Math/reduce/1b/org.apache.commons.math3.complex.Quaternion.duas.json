{
"Class" : "org.apache.commons.math3.complex.Quaternion", 
"Methods" : [{ "Name" : "<init>" ,
"Duas" : 11,
"0" :  "(89,93, this)",
"1" :  "(89,94, this)",
"2" :  "(89,95, this)",
"3" :  "(89,96, this)",
"4" :  "(89,93, scalar)",
"5" :  "(89,(90,91), v)",
"6" :  "(89,(90,93), v)",
"7" :  "(89,94, v)",
"8" :  "(89,95, v)",
"9" :  "(89,96, v)",
"10" :  "(89,91, v)"},{ "Name" : "normalize" ,
"Duas" : 12,
"0" :  "(252,258, this)",
"1" :  "(252,(254,255), SAFE_MIN)",
"2" :  "(252,(254,258), SAFE_MIN)",
"3" :  "(252,255, NORM)",
"4" :  "(252,258, this.q0)",
"5" :  "(252,258, this.q1)",
"6" :  "(252,258, this.q2)",
"7" :  "(252,258, this.q3)",
"8" :  "(252,(254,255), norm)",
"9" :  "(252,(254,258), norm)",
"10" :  "(252,258, norm)",
"11" :  "(252,255, norm)"},{ "Name" : "equals" ,
"Duas" : 31,
"0" :  "(269,(269,270), this)",
"1" :  "(269,(269,272), this)",
"2" :  "(269,(274,274), this)",
"3" :  "(269,(274,274), this)",
"4" :  "(269,(274,274), this)",
"5" :  "(269,(274,274), this)",
"6" :  "(269,(274,274), this)",
"7" :  "(269,(274,274), this)",
"8" :  "(269,(274,274), this)",
"9" :  "(269,(274,274), this)",
"10" :  "(269,(269,270), other)",
"11" :  "(269,(269,272), other)",
"12" :  "(269,(272,273), other)",
"13" :  "(269,(272,280), other)",
"14" :  "(269,273, other)",
"15" :  "(269,(274,274), this.q0)",
"16" :  "(269,(274,274), this.q0)",
"17" :  "(269,(274,274), this.q1)",
"18" :  "(269,(274,274), this.q1)",
"19" :  "(269,(274,274), this.q2)",
"20" :  "(269,(274,274), this.q2)",
"21" :  "(269,(274,274), this.q3)",
"22" :  "(269,(274,274), this.q3)",
"23" :  "(273,(274,274), q)",
"24" :  "(273,(274,274), q)",
"25" :  "(273,(274,274), q)",
"26" :  "(273,(274,274), q)",
"27" :  "(273,(274,274), q)",
"28" :  "(273,(274,274), q)",
"29" :  "(273,(274,274), q)",
"30" :  "(273,(274,274), q)"},{ "Name" : "hashCode" ,
"Duas" : 15,
"0" :  "(289,294, result)",
"1" :  "(289,292, result)",
"2" :  "(290,290, arr$)",
"3" :  "(290,(290,290), len$)",
"4" :  "(290,(290,294), len$)",
"5" :  "(290,(290,290), i$)",
"6" :  "(290,(290,294), i$)",
"7" :  "(290,290, i$)",
"8" :  "(290,290, i$)",
"9" :  "(292,294, result)",
"10" :  "(292,292, result)",
"11" :  "(290,(290,290), i$)",
"12" :  "(290,(290,294), i$)",
"13" :  "(290,290, i$)",
"14" :  "(290,290, i$)"},{ "Name" : "equals" ,
"Duas" : 32,
"0" :  "(308,(308,308), this)",
"1" :  "(308,(308,308), this)",
"2" :  "(308,(308,308), this)",
"3" :  "(308,(308,308), this)",
"4" :  "(308,(308,308), this)",
"5" :  "(308,(308,308), this)",
"6" :  "(308,(308,308), this)",
"7" :  "(308,(308,308), this)",
"8" :  "(308,(308,308), q)",
"9" :  "(308,(308,308), q)",
"10" :  "(308,(308,308), q)",
"11" :  "(308,(308,308), q)",
"12" :  "(308,(308,308), q)",
"13" :  "(308,(308,308), q)",
"14" :  "(308,(308,308), q)",
"15" :  "(308,(308,308), q)",
"16" :  "(308,(308,308), eps)",
"17" :  "(308,(308,308), eps)",
"18" :  "(308,(308,308), eps)",
"19" :  "(308,(308,308), eps)",
"20" :  "(308,(308,308), eps)",
"21" :  "(308,(308,308), eps)",
"22" :  "(308,(308,308), eps)",
"23" :  "(308,(308,308), eps)",
"24" :  "(308,(308,308), this.q0)",
"25" :  "(308,(308,308), this.q0)",
"26" :  "(308,(308,308), this.q1)",
"27" :  "(308,(308,308), this.q1)",
"28" :  "(308,(308,308), this.q2)",
"29" :  "(308,(308,308), this.q2)",
"30" :  "(308,(308,308), this.q3)",
"31" :  "(308,(308,308), this.q3)"},{ "Name" : "isPureQuaternion" ,
"Duas" : 4,
"0" :  "(334,(334,334), this)",
"1" :  "(334,(334,334), this)",
"2" :  "(334,(334,334), eps)",
"3" :  "(334,(334,334), eps)"},{ "Name" : "getPositivePolarForm" ,
"Duas" : 4,
"0" :  "(343,(343,344), this)",
"1" :  "(343,(343,352), this)",
"2" :  "(343,352, this)",
"3" :  "(343,344, this)"},{ "Name" : "getInverse" ,
"Duas" : 12,
"0" :  "(364,369, this)",
"1" :  "(364,369, this.q0)",
"2" :  "(364,369, this.q1)",
"3" :  "(364,369, this.q2)",
"4" :  "(364,369, this.q3)",
"5" :  "(364,(365,366), SAFE_MIN)",
"6" :  "(364,(365,369), SAFE_MIN)",
"7" :  "(364,366, NORM)",
"8" :  "(364,(365,366), squareNorm)",
"9" :  "(364,(365,369), squareNorm)",
"10" :  "(364,369, squareNorm)",
"11" :  "(364,366, squareNorm)"}]
}
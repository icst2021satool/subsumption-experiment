{
"Class" : "java_cup.runtime.SyntaxTreeXPath", 
"Methods" : [{ "Name" : "query" ,
"Duas" : 6,
"0" :  "(9,(9,9), query)",
"1" :  "(9,(9,10), query)",
"2" :  "(9,10, query)",
"3" :  "(9,9, query)",
"4" :  "(9,10, element)",
"5" :  "(9,10, query)"},{ "Name" : "query0" ,
"Duas" : 39,
"0" :  "(14,(14,15), q)",
"1" :  "(14,(14,17), q)",
"2" :  "(14,(20,20), q)",
"3" :  "(14,(20,21), q)",
"4" :  "(14,(21,21), q)",
"5" :  "(14,(21,22), q)",
"6" :  "(14,25, q)",
"7" :  "(14,15, q)",
"8" :  "(14,(14,15), idx)",
"9" :  "(14,(14,17), idx)",
"10" :  "(14,(20,20), idx)",
"11" :  "(14,(20,21), idx)",
"12" :  "(14,(21,21), idx)",
"13" :  "(14,(21,22), idx)",
"14" :  "(14,25, idx)",
"15" :  "(14,15, idx)",
"16" :  "(14,(20,20), element)",
"17" :  "(14,(20,21), element)",
"18" :  "(14,22, element)",
"19" :  "(14,21, element)",
"20" :  "(14,15, element)",
"21" :  "(14,(20,20), seq)",
"22" :  "(14,(20,21), seq)",
"23" :  "(14,15, seq)",
"24" :  "(17,27, l)",
"25" :  "(17,25, l)",
"26" :  "(22,(23,24), children)",
"27" :  "(22,(23,27), children)",
"28" :  "(22,24, children)",
"29" :  "(23,(23,24), i)",
"30" :  "(23,(23,27), i)",
"31" :  "(23,24, i)",
"32" :  "(23,25, i)",
"33" :  "(23,23, i)",
"34" :  "(23,(23,24), i)",
"35" :  "(23,(23,27), i)",
"36" :  "(23,24, i)",
"37" :  "(23,25, i)",
"38" :  "(23,23, i)"},{ "Name" : "matchDeeperDescendant" ,
"Duas" : 33,
"0" :  "(30,(30,30), query)",
"1" :  "(30,(30,31), query)",
"2" :  "(30,31, query)",
"3" :  "(30,37, query)",
"4" :  "(30,34, query)",
"5" :  "(30,(30,30), idx)",
"6" :  "(30,(30,31), idx)",
"7" :  "(30,31, idx)",
"8" :  "(30,37, idx)",
"9" :  "(30,34, idx)",
"10" :  "(30,31, element)",
"11" :  "(30,33, element)",
"12" :  "(30,34, element)",
"13" :  "(30,30, element)",
"14" :  "(30,31, seq)",
"15" :  "(30,34, seq)",
"16" :  "(31,(34,34), matches)",
"17" :  "(31,(34,35), matches)",
"18" :  "(32,39, l)",
"19" :  "(32,37, l)",
"20" :  "(33,(35,36), children)",
"21" :  "(33,(35,39), children)",
"22" :  "(33,36, children)",
"23" :  "(35,(35,36), i)",
"24" :  "(35,(35,39), i)",
"25" :  "(35,36, i)",
"26" :  "(35,37, i)",
"27" :  "(35,35, i)",
"28" :  "(35,(35,36), i)",
"29" :  "(35,(35,39), i)",
"30" :  "(35,36, i)",
"31" :  "(35,37, i)",
"32" :  "(35,35, i)"},{ "Name" : "match" ,
"Duas" : 75,
"0" :  "(43,58, elem)",
"1" :  "(43,(67,67), elem)",
"2" :  "(43,(67,70), elem)",
"3" :  "(43,(67,68), elem)",
"4" :  "(43,(67,70), elem)",
"5" :  "(43,56, elem)",
"6" :  "(43,51, elem)",
"7" :  "(43,48, elem)",
"8" :  "(43,(74,74), seq)",
"9" :  "(43,(74,74), seq)",
"10" :  "(43,58, elem.tagname)",
"11" :  "(43,56, elem.tagname)",
"12" :  "(43,51, elem.tagname)",
"13" :  "(43,48, elem.tagname)",
"14" :  "(43,56, result)",
"15" :  "(43,53, result)",
"16" :  "(43,51, result)",
"17" :  "(43,48, result)",
"18" :  "(44,(60,61), name)",
"19" :  "(44,(60,79), name)",
"20" :  "(44,61, name)",
"21" :  "(45,(46,47), tag)",
"22" :  "(45,(46,55), tag)",
"23" :  "(45,(55,56), tag)",
"24" :  "(45,(55,58), tag)",
"25" :  "(45,58, tag)",
"26" :  "(45,56, tag)",
"27" :  "(45,(47,48), tag)",
"28" :  "(45,(47,50), tag)",
"29" :  "(45,(50,51), tag)",
"30" :  "(45,(50,53), tag)",
"31" :  "(45,51, tag)",
"32" :  "(45,48, tag)",
"33" :  "(48,79, result)",
"34" :  "(48,74, result)",
"35" :  "(48,68, result)",
"36" :  "(51,79, result)",
"37" :  "(51,74, result)",
"38" :  "(51,68, result)",
"39" :  "(53,79, result)",
"40" :  "(53,74, result)",
"41" :  "(53,68, result)",
"42" :  "(56,79, result)",
"43" :  "(56,74, result)",
"44" :  "(56,68, result)",
"45" :  "(58,79, result)",
"46" :  "(58,74, result)",
"47" :  "(58,68, result)",
"48" :  "(60,(60,61), i)",
"49" :  "(60,(60,79), i)",
"50" :  "(60,61, i)",
"51" :  "(60,60, i)",
"52" :  "(61,(62,62), predicate)",
"53" :  "(61,(62,63), predicate)",
"54" :  "(61,63, predicate)",
"55" :  "(63,(65,66), predicate)",
"56" :  "(63,(65,73), predicate)",
"57" :  "(63,(73,74), predicate)",
"58" :  "(63,(73,77), predicate)",
"59" :  "(63,(74,74), predicate)",
"60" :  "(63,(74,74), predicate)",
"61" :  "(63,(66,67), predicate)",
"62" :  "(63,(66,71), predicate)",
"63" :  "(63,(67,68), predicate)",
"64" :  "(63,(67,70), predicate)",
"65" :  "(68,79, result)",
"66" :  "(68,74, result)",
"67" :  "(68,68, result)",
"68" :  "(74,79, result)",
"69" :  "(74,74, result)",
"70" :  "(74,68, result)",
"71" :  "(60,(60,61), i)",
"72" :  "(60,(60,79), i)",
"73" :  "(60,61, i)",
"74" :  "(60,60, i)"}]
}
{
"Class" : "elki.utilities.scaling.outlier.RankingPseudoOutlierScaling", 
"Methods" : [{ "Name" : "prepare" ,
"Duas" : 21,
"0" :  "(55,68, this)",
"1" :  "(55,62, this)",
"2" :  "(55,58, this)",
"3" :  "(55,(57,58), or)",
"4" :  "(55,(57,60), or)",
"5" :  "(55,61, oscores)",
"6" :  "(55,(64,65), oscores)",
"7" :  "(55,(64,68), oscores)",
"8" :  "(55,62, oscores)",
"9" :  "(56,68, this.scores)",
"10" :  "(56,62, this.scores)",
"11" :  "(60,(64,65), pos)",
"12" :  "(60,(64,68), pos)",
"13" :  "(60,62, pos)",
"14" :  "(61,(61,62), iditer)",
"15" :  "(61,(61,64), iditer)",
"16" :  "(61,62, iditer)",
"17" :  "(61,61, iditer)",
"18" :  "(62,(64,65), pos)",
"19" :  "(62,(64,68), pos)",
"20" :  "(62,62, pos)"},{ "Name" : "getScaled" ,
"Duas" : 56,
"0" :  "(88,89, this)",
"1" :  "(88,(95,95), this)",
"2" :  "(88,(95,98), this)",
"3" :  "(88,98, this)",
"4" :  "(88,(99,99), this)",
"5" :  "(88,(99,99), this)",
"6" :  "(88,(95,96), this)",
"7" :  "(88,(95,98), this)",
"8" :  "(88,(92,93), this)",
"9" :  "(88,(92,95), this)",
"10" :  "(88,(88,88), this)",
"11" :  "(88,(88,89), this)",
"12" :  "(88,89, value)",
"13" :  "(88,(95,96), value)",
"14" :  "(88,(95,98), value)",
"15" :  "(88,(92,93), value)",
"16" :  "(88,(92,95), value)",
"17" :  "(88,(88,88), $assertionsDisabled)",
"18" :  "(88,(88,89), $assertionsDisabled)",
"19" :  "(88,89, this.scores)",
"20" :  "(88,(95,95), this.scores)",
"21" :  "(88,(95,98), this.scores)",
"22" :  "(88,98, this.scores)",
"23" :  "(88,(95,96), this.scores)",
"24" :  "(88,(95,98), this.scores)",
"25" :  "(88,(92,93), this.scores)",
"26" :  "(88,(92,95), this.scores)",
"27" :  "(88,(88,88), this.scores)",
"28" :  "(88,(88,89), this.scores)",
"29" :  "(88,(99,99), this.inverted)",
"30" :  "(88,(99,99), this.inverted)",
"31" :  "(90,(92,92), first)",
"32" :  "(90,(92,95), first)",
"33" :  "(90,98, first)",
"34" :  "(90,(92,93), first)",
"35" :  "(90,(92,95), first)",
"36" :  "(90,93, first)",
"37" :  "(90,(95,95), last)",
"38" :  "(90,(95,98), last)",
"39" :  "(90,98, last)",
"40" :  "(90,(95,96), last)",
"41" :  "(90,(95,98), last)",
"42" :  "(90,96, last)",
"43" :  "(93,(92,92), first)",
"44" :  "(93,(92,95), first)",
"45" :  "(93,98, first)",
"46" :  "(93,(92,93), first)",
"47" :  "(93,(92,95), first)",
"48" :  "(93,93, first)",
"49" :  "(96,(95,95), last)",
"50" :  "(96,(95,98), last)",
"51" :  "(96,98, last)",
"52" :  "(96,(95,96), last)",
"53" :  "(96,(95,98), last)",
"54" :  "(96,96, last)",
"55" :  "(98,99, v)"}]
}